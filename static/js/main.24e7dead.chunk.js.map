{"version":3,"sources":["features/topic/topicSlice.js","features/topic/TopicLink.js","features/topic/TopicMenu.js","features/chapter/chapterSlice.js","features/reference/referenceSlice.js","features/reference/Reference.js","features/reference/ReferenceList.js","features/chapter/Chapter.js","features/chapter/ChapterList.js","features/topic/Topic.js","data/schema.js","data/index.js","features/dashboard/Dashboard.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["topicSlice","createSlice","name","initialState","ids","data","reducers","setTopics","state","action","payload","topics","entities","result","currentId","length","setCurrentTopicId","actions","selectTopicById","id","topic","selectTopicIds","TopicLink","title","useSelector","to","TopicMenu","map","key","chapterSlice","extraReducers","chapters","referenceSlice","updateReference","reviewed","references","Reference","dispatch","useDispatch","reference","selectReferenceById","url","localStorage","getItem","selectReferenceIsReviewedById","ref","useRef","className","type","onChange","setItem","setReferenceReviewed","current","checked","href","rel","target","ReferenceList","Chapter","chapter","selectChapterById","chapterId","ChapterList","Topic","useParams","schema","Entity","idAttribute","normalize","json","Dashboard","useEffect","exact","path","App","configureStore","reducer","topicReducer","referenceReducer","chapterReducer","middleware","thunk","logger","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24e7dead.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nexport const topicSlice = createSlice({\n    name: 'topic',\n    initialState: {\n        ids: [],\n        data: []\n    },\n    reducers: {\n        setTopics: (state, action) => {\n            const {entities: {topics}, result} = action.payload\n            state.data = topics\n            state.ids = result\n            state.currentId = (result.length) ? result[0] : null\n        },\n        setCurrentTopicId: (state, action) => {\n            state.currentId = action.payload\n        }\n    },\n});\n\nexport const { setTopics } = topicSlice.actions;\n\nexport const selectTopicById = (id) => state => state.topic.data[id];\nexport const selectTopicIds = state => state.topic.ids;\n\nexport default topicSlice.reducer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {useSelector} from \"react-redux\";\nimport {selectTopicById} from \"./topicSlice\";\nimport {Link} from \"react-router-dom\";\n\nfunction TopicLink({id}) {\n    const {title} = useSelector(selectTopicById(id));\n    return <Link to={`/${id}`}># {title}</Link>\n}\n\nTopicLink.propTypes = {\n    id: PropTypes.string.isRequired\n}\n\nexport default TopicLink;\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport TopicLink from \"./TopicLink\";\nimport {selectTopicIds} from \"./topicSlice\";\n\nexport default function TopicMenu () {\n    const topics = useSelector(selectTopicIds);\n    return <ul>{topics.map((id) => <li key={id}><TopicLink id={id} /></li>)}</ul>;\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const chapterSlice = createSlice({\n    name: 'chapter',\n    initialState: {\n        data: []\n    },\n    extraReducers: {\n        'topic/setTopics': (state, action) => {\n            const {entities: {chapters}} = action.payload\n            state.data = chapters\n        }\n    }\n});\n\nexport const selectChapterById = (id) => state => state.chapter.data[id];\n\nexport default chapterSlice.reducer;\n","import {createSlice} from '@reduxjs/toolkit';\n\nexport const referenceSlice = createSlice({\n    name: 'reference',\n    initialState: {\n        data: []\n    },\n    reducers: {\n        updateReference: (state, action) => {\n            const {id, reviewed} = action.payload\n            state.data[id].reviewed = reviewed\n        }\n    },\n    extraReducers: {\n        'topic/setTopics': (state, action) => {\n            const {entities: {references}} = action.payload\n            state.data = references\n        }\n    }\n});\n\nexport const { updateReference } = referenceSlice.actions;\n\nexport const setReferenceReviewed = (id, reviewed) => dispatch => {\n    localStorage.setItem(id, reviewed)\n    dispatch(updateReference({id, reviewed}))\n};\n\nexport const selectReferenceById = (id) => state => state.reference.data[id];\nexport const selectReferenceIsReviewedById = (id) => () => 'true' === localStorage.getItem(id);\n\n\nexport default referenceSlice.reducer;\n\n","import React, {useRef} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectReferenceById, selectReferenceIsReviewedById, setReferenceReviewed} from \"./referenceSlice\"\n\nfunction Reference({id}) {\n    const dispatch = useDispatch();\n    const {title, url} = useSelector(selectReferenceById(id));\n    const reviewed = useSelector(selectReferenceIsReviewedById(id))\n    const ref = useRef()\n\n    const handleOnReview = () => {\n        dispatch(setReferenceReviewed(id, ref.current.checked));\n    }\n\n    return <div className=\"form-group\">\n        <input type=\"checkbox\" ref={ref} className=\"form-check-input\" onChange={handleOnReview} checked={reviewed} />\n        <label className=\"form-check-label\">\n            <a href={url} rel=\"noopener noreferrer\"  target=\"_blank\">{title}</a>\n        </label>\n    </div>;\n}\n\nReference.propTypes = {\n    id: PropTypes.string.isRequired\n}\n\nexport default Reference;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Reference from \"./Reference\";\n\nfunction ReferenceList({references}) {\n    return <div>\n        {references.map((id) => <Reference key={id} id={id} />)}\n    </div>;\n}\n\nReferenceList.propTypes = {\n    references: PropTypes.array.isRequired\n}\n\nexport default ReferenceList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {useSelector} from \"react-redux\";\nimport {selectChapterById} from \"./chapterSlice\";\nimport ReferenceList from \"../reference/ReferenceList\";\n\nfunction Chapter({id}) {\n    const {title, references} = useSelector(selectChapterById(id))\n\n    return <div className=\"container\">\n        <h3>{title}</h3>\n        <div className=\"container\">\n            <ReferenceList chapterId={id} references={references} />\n        </div>\n    </div>\n}\n\nChapter.propTypes = {\n    id: PropTypes.string.isRequired\n}\n\nexport default Chapter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chapter from \"./Chapter\";\n\nfunction ChapterList({chapters}) {\n    return <div>\n        {chapters.map(id => <Chapter key={id} id={id} />)}\n    </div>\n}\n\nChapterList.propTypes = {\n    chapters: PropTypes.array.isRequired\n}\n\nexport default ChapterList;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {useParams} from \"react-router-dom\";\nimport {selectTopicById} from \"./topicSlice\"\nimport ChapterList from \"../chapter/ChapterList\";\n\nfunction Topic() {\n    const { id } = useParams();\n    const {title, chapters} = useSelector(selectTopicById(id));\n\n    return <div className=\"container\">\n        <h2># {title}</h2>\n        <hr />\n        <ChapterList chapters={chapters} />\n    </div>;\n}\n\nexport default Topic;\n","import { schema } from 'normalizr';\n\nexport const reference = new schema.Entity('references');\nexport const chapter = new schema.Entity('chapters', {\n    references: [reference]\n});\n\nexport const topic = new schema.Entity('topics', {\n    chapters: [chapter]\n}, {idAttribute: 'slug'});\n","import { normalize } from 'normalizr';\nimport {topic} from './schema'\nimport json from './topics.json'\n\nexport const data = normalize(json, [topic])\n","import React, {useEffect} from \"react\";\nimport {Switch, Route, HashRouter} from 'react-router-dom'\nimport TopicMenu from \"../topic/TopicMenu\";\nimport Topic from \"../topic/Topic\";\nimport {selectTopicIds, setTopics} from \"../topic/topicSlice\";\nimport {data} from \"../../data\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nexport default function Dashboard () {\n    const dispatch = useDispatch();\n    const topics = useSelector(selectTopicIds);\n\n    useEffect(() => {\n        dispatch(setTopics(data))\n    });\n\n    return <HashRouter>\n        { (topics.length) ?\n        <div className=\"row\">\n            <div className=\"col-3\">\n                <h3>Topics</h3>\n                <TopicMenu />\n            </div>\n            <div className=\"col-9\">\n                <Switch>\n                    <Route exact path=\"/\">\n                        <h3>\n                            This is a simple todo app to help you learn<br/> <a href=\"https://certification.symfony.com/\">Symfony 5.0 certification topics</a>\n                        </h3>\n                    </Route>\n                    <Route path=\"/:id\">\n                        <Topic />\n                    </Route>\n                </Switch>\n            </div>\n        </div> : null}\n    </HashRouter>;\n}\n","import React from 'react';\nimport 'bootstrap/scss/bootstrap.scss';\nimport '@fortawesome/fontawesome-free'\nimport './App.css';\nimport Dashboard from \"./features/dashboard/Dashboard\";\n\nfunction App() {\n  return (\n      <Dashboard />\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nimport topicReducer from '../features/topic/topicSlice';\nimport chapterReducer from '../features/chapter/chapterSlice';\nimport referenceReducer from '../features/reference/referenceSlice';\n\nexport default configureStore({\n  reducer: {\n    topic: topicReducer,\n    reference: referenceReducer,\n    chapter: chapterReducer\n  },\n  middleware: [thunk, logger]\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}